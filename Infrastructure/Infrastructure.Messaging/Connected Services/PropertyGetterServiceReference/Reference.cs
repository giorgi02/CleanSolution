//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PropertyGetterServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LimitationPeriods", Namespace="http://schemas.datacontract.org/2004/07/CreditInfoDataObjects.InternalTypes")]
    public partial class LimitationPeriods : object
    {
        
        private PropertyGetterServiceReference.LimitationPeriodTypes PeriodField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PropertyGetterServiceReference.LimitationPeriodTypes Period
        {
            get
            {
                return this.PeriodField;
            }
            set
            {
                this.PeriodField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LimitationPeriodTypes", Namespace="http://schemas.datacontract.org/2004/07/CreditInfoDataObjects.InternalTypes")]
    public enum LimitationPeriodTypes : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offline = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hour = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        H24 = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        H48 = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        H72 = 72,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OneWeekOld = 168,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TwoWeeksOld = 336,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FifteenDaysOld = 360,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OneMonthOld = 840,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PropertyGetterServiceReference.IPropertyGetterService")]
    public interface IPropertyGetterService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPropertyGetterService/GetDefaultLimitationPeriod", ReplyAction="http://tempuri.org/IPropertyGetterService/GetDefaultLimitationPeriodResponse")]
        System.Threading.Tasks.Task<PropertyGetterServiceReference.LimitationPeriods> GetDefaultLimitationPeriodAsync(int channelId, int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPropertyGetterService/CheckChannelIsValid", ReplyAction="http://tempuri.org/IPropertyGetterService/CheckChannelIsValidResponse")]
        System.Threading.Tasks.Task<bool> CheckChannelIsValidAsync(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPropertyGetterService/CheckProductIsValid", ReplyAction="http://tempuri.org/IPropertyGetterService/CheckProductIsValidResponse")]
        System.Threading.Tasks.Task<bool> CheckProductIsValidAsync(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPropertyGetterService/CheckCustomerIsProhibited", ReplyAction="http://tempuri.org/IPropertyGetterService/CheckCustomerIsProhibitedResponse")]
        System.Threading.Tasks.Task<bool> CheckCustomerIsProhibitedAsync(string personId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface IPropertyGetterServiceChannel : PropertyGetterServiceReference.IPropertyGetterService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class PropertyGetterServiceClient : System.ServiceModel.ClientBase<PropertyGetterServiceReference.IPropertyGetterService>, PropertyGetterServiceReference.IPropertyGetterService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PropertyGetterServiceClient() : 
                base(PropertyGetterServiceClient.GetDefaultBinding(), PropertyGetterServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPropertyGetterService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PropertyGetterServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(PropertyGetterServiceClient.GetBindingForEndpoint(endpointConfiguration), PropertyGetterServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PropertyGetterServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PropertyGetterServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PropertyGetterServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PropertyGetterServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PropertyGetterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<PropertyGetterServiceReference.LimitationPeriods> GetDefaultLimitationPeriodAsync(int channelId, int productId)
        {
            return base.Channel.GetDefaultLimitationPeriodAsync(channelId, productId);
        }
        
        public System.Threading.Tasks.Task<bool> CheckChannelIsValidAsync(int channelId)
        {
            return base.Channel.CheckChannelIsValidAsync(channelId);
        }
        
        public System.Threading.Tasks.Task<bool> CheckProductIsValidAsync(int productId)
        {
            return base.Channel.CheckProductIsValidAsync(productId);
        }
        
        public System.Threading.Tasks.Task<bool> CheckCustomerIsProhibitedAsync(string personId)
        {
            return base.Channel.CheckCustomerIsProhibitedAsync(personId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPropertyGetterService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPropertyGetterService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:58424/PropertyGetterService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PropertyGetterServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPropertyGetterService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PropertyGetterServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPropertyGetterService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPropertyGetterService,
        }
    }
}
